/* * AMLOGIC lcd backlight support header file for backlight driver. * * * Author:  Evoke Zhang <evoke.zhang@amlogic.com> * */#ifndef __AML_LCD_BACKLIGHT_H#define __AML_LCD_BACKLIGHT_H#include <linux/backlight.h>#include <linux/workqueue.h>#include <mach/cpu.h>#include <linux/amlogic/aml_gpio_consumer.h>#include <linux/pinctrl/consumer.h>#define DRV_BL_FLAG		0#define LCD_BL_FLAG		1#define BL_LEVEL_MAX    		255#define BL_LEVEL_MIN    		10#define BL_LEVEL_OFF			1#define BL_LEVEL_MID    		128#define BL_LEVEL_MID_MAPPED		102/* for lcd backlight power */typedef enum {    BL_CTL_GPIO = 0,    BL_CTL_PWM_NEGATIVE = 1,    BL_CTL_PWM_POSITIVE = 2,    BL_CTL_PWM_COMBO = 3,    BL_CTL_EXTERN = 4,    BL_CTL_MAX = 5,} BL_Ctrl_Method_t;typedef enum {    BL_PWM_A = 0,    BL_PWM_B,    BL_PWM_C,    BL_PWM_D,#if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8)    BL_PWM_E,    BL_PWM_F,#endif    BL_PWM_MAX,} BL_PWM_t;struct lcd_bl_config_s {    unsigned level_default;    unsigned level_mid;    unsigned level_mid_mapping;    unsigned level_min;    unsigned level_max;    unsigned short power_on_delay;    unsigned char method;    int gpio;    unsigned char gpio_on;    unsigned char gpio_off;    unsigned dim_max;    unsigned dim_min;    unsigned char pwm_port;    unsigned char pwm_gpio_used;    unsigned pwm_cnt;    unsigned pwm_pre_div;    unsigned pwm_max;    unsigned pwm_min;    unsigned combo_level_switch;    unsigned char combo_high_port;    unsigned char combo_high_method;    unsigned char combo_low_port;    unsigned char combo_low_method;    unsigned combo_high_cnt;    unsigned combo_high_pre_div;    unsigned combo_high_duty_max;    unsigned combo_high_duty_min;    unsigned combo_low_cnt;    unsigned combo_low_pre_div;    unsigned combo_low_duty_max;    unsigned combo_low_duty_min;    struct pinctrl *p;};/* backlight_properties: state *//* Flags used to signal drivers of state changes *//* Upper 4 bits are reserved for driver internal use */#define BL_STATE_LCD_ON     (1 << 3)#define BL_STATE_BL_ON      (1 << 2)#define BL_STATE_REAL_ON    (1 << 0)struct aml_bl_s {    unsigned int level;    unsigned int state;    struct lcd_bl_config_s      *bconf;    struct backlight_device     *bldev;    //struct platform_device      *pdev;    struct workqueue_struct *workqueue;    struct delayed_work bl_delayed_work;};#define BL_GPIO_OUTPUT_LOW        0#define BL_GPIO_OUTPUT_HIGH       1#define BL_GPIO_INPUT             2#define BL_LEVEL_DEFAULT			BL_LEVEL_MID#define BL_NAME 				"backlight"#define bl_gpio_request(gpio) 			amlogic_gpio_request(gpio, BL_NAME)#define bl_gpio_free(gpio) 			amlogic_gpio_free(gpio, BL_NAME)#define bl_gpio_direction_input(gpio) 		amlogic_gpio_direction_input(gpio, BL_NAME)#define bl_gpio_direction_output(gpio, val)	amlogic_gpio_direction_output(gpio, val, BL_NAME)#define bl_gpio_get_value(gpio) 		amlogic_get_value(gpio, BL_NAME)#define bl_gpio_set_value(gpio,val) 		amlogic_set_value(gpio, val, BL_NAME)extern void bl_power_on(int bl_flag);extern void bl_power_off(int bl_flag);extern unsigned get_backlight_level(void);#endif